1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
7:1-7:9::Lib.realSize :: "x1:[a] -> {VV : GHC.Types.Int | VV == Lib.realSize x1}"
8:19-8:34::lq_anf$##7205759403792803280 :: "{v : GHC.Types.Int | v == (1 : int)}"
8:21-8:22::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
8:23-8:34::lq_anf$##7205759403792803281 :: "{VV : GHC.Types.Int | VV == Lib.realSize xs}"
22:1-22:7::Lib.okList :: "{v : (Lib.SList [GHC.Types.Char]) | Lib.size v == 1}"
22:10-22:14::lq_anf$##7205759403792803282 :: "{v : GHC.Types.Int | v == (1 : int)}"
29:1-29:4::Lib.nil :: "{v : (Lib.SList a) | Lib.size v == 0}"
29:7-29:11::lq_anf$##7205759403792803287 :: "{v : GHC.Types.Int | v == (0 : int)}"
32:1-32:5::Lib.cons :: "a -> x2:(Lib.SList a) -> {v : (Lib.SList a) | Lib.size v == Lib.size v + 1}"
32:6-32:7::x :: "a"
32:20-32:28::_ :: "x1:[a] -> {v : (Lib.SList a) | Lib.elems v == x1}"
32:24-32:27::lq_anf$##7205759403792803296 :: "GHC.Types.Int"
32:25-32:26::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
35:1-35:4::Lib.die :: "{VV : [GHC.Types.Char] | false} -> a"
35:7-35:12::$dIP_a2oS :: "{v : (GHC.Classes.IP [GHC.Types.Char] GHC.Stack.Types.CallStack) | v == $dIP_a2oS}"
39:1-39:3::Lib.hd :: "{v : (Lib.SList a) | Lib.size v > 0} -> a"
40:8-40:25::lq_anf$##7205759403792803326 :: "[GHC.Types.Char]"
43:1-43:3::Lib.tl :: "x1:{v : (Lib.SList a) | Lib.size v > 0} -> {v : (Lib.SList a) | Lib.size v == Lib.size x1 - 1}"
43:20-43:28::_ :: "x1:[a] -> {v : (Lib.SList a) | Lib.elems v == x1}"
43:24-43:27::lq_anf$##7205759403792803332 :: "GHC.Types.Int"
43:25-43:26::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
44:20-44:37::lq_anf$##7205759403792803330 :: "[GHC.Types.Char]"
60:1-60:4::Lib.okQ :: "(Lib.Queue [GHC.Types.Char])"
60:8-60:16::_ :: "x1:{v : (Lib.SList [GHC.Types.Char]) | Lib.size v <= Lib.size Lib.okList} -> {v : (Lib.Queue [GHC.Types.Char]) | Lib.sizeQ v == Lib.size Lib.okList + Lib.size x1\n                                                                                                                 && Lib.back v == x1\n                                                                                                                 && Lib.front v == Lib.okList}"
66:1-66:4::Lib.emp :: "{v : (Lib.Queue a) | Lib.sizeQ v == 0}"
66:7-66:12::lq_anf$##7205759403792803289 :: "{v : (Lib.SList a) | Lib.size v == 0}"
71:1-71:6::Lib.sizeQ :: "x1:(Lib.Queue a) -> {v : GHC.Types.Int | v >= 0\n                                         && v == Lib.sizeQ x1}"
71:17-71:23::lq_anf$##7205759403792803386 :: "{v : GHC.Types.Int | v >= 0\n                     && v == Lib.size f}"
71:24-71:25::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
71:26-71:32::lq_anf$##7205759403792803387 :: "{v : GHC.Types.Int | v >= 0\n                     && v == Lib.size b}"
77:1-77:7::Lib.remove :: "x1:{v : (Lib.Queue a) | Lib.sizeQ v > 0} -> (a, {v : (Lib.Queue a) | Lib.sizeQ v == Lib.sizeQ x1 - 1})"
77:19-77:23::lq_anf$##7205759403792803374 :: "a"
77:25-77:37::_ :: "(Lib.SList a) -> (Lib.Queue a)"
77:32-77:36::lq_anf$##7205759403792803375 :: "{v : (Lib.SList a) | Lib.size v == Lib.size f - 1}"
82:1-82:9::Lib.okRemove :: "(GHC.Num.Num a) => (a, (Lib.Queue a))"
82:12-82:28::lq_anf$##7205759403792803377 :: "{v : (Lib.Queue a) | Lib.sizeQ v == 2}"
86:1-86:10::Lib.example2Q :: "(GHC.Num.Num a) => {v : (Lib.Queue a) | Lib.sizeQ v == 2}"
86:13-86:40::_ :: "x1:(Lib.SList a) -> {v : (Lib.Queue a) | Lib.back v == x1}"
86:16-86:39::lq_anf$##7205759403792803304 :: "(Lib.SList a)"
86:26-86:38::lq_anf$##7205759403792803303 :: "(Lib.SList a)"
94:1-94:10::Lib.example0Q :: "{v : (Lib.Queue a) | Lib.sizeQ v == 0}"
94:13-94:18::lq_anf$##7205759403792803291 :: "{v : (Lib.SList a) | Lib.size v == 0}"
98:1-98:7::Lib.insert :: "a -> x2:(Lib.Queue a) -> {v : (Lib.Queue a) | Lib.sizeQ v == Lib.sizeQ v + 1}"
98:8-98:9::e :: "a"
98:20-98:27::_ :: "x1:{v : (Lib.SList a) | Lib.size v > Lib.size f => Lib.size v - Lib.size f == 1} -> {v : (Lib.Queue a) | Lib.sizeQ v == Lib.size f + Lib.size x1}"
98:29-98:39::lq_anf$##7205759403792803352 :: "{v : (Lib.SList a) | Lib.size v == Lib.size b + 1}"
102:1-102:10::Lib.replicate :: "x1:{v : GHC.Types.Int | v >= 0} -> a -> {v : (Lib.Queue a) | Lib.sizeQ v == x1}"
103:17-103:25::_ :: "x1:(Lib.Queue a) -> {v : (Lib.Queue a) | Lib.sizeQ v == Lib.sizeQ x1 + 1}"
103:27-103:42::Lib.replicate :: "x1:{v : GHC.Types.Int | v >= 0} -> a -> {v : (Lib.Queue a) | Lib.sizeQ v == x1}"
103:38-103:41::lq_anf$##7205759403792803356 :: "GHC.Types.Int"
103:39-103:40::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
106:1-106:3::Lib.y3 :: "{v : (Lib.Queue [GHC.Types.Char]) | Lib.sizeQ v == 3}"
106:6-106:17::lq_anf$##7205759403792803358 :: "{v : GHC.Types.Int | v == (3 : int)}"
110:1-110:6::Lib.makeq :: "x1:(Lib.SList a) -> x2:{b : (Lib.SList a) | Lib.size b > Lib.size x1 => Lib.size b - Lib.size x1 == 1} -> {v : (Lib.Queue a) | Lib.sizeQ v == Lib.size x1 + Lib.size v}"
110:7-110:8::f :: "(Lib.SList a)"
110:9-110:10::b :: "{b : (Lib.SList a) | Lib.size b > Lib.size f => Lib.size b - Lib.size f == 1}"
111:5-111:11::lq_anf$##7205759403792803344 :: "{v : GHC.Types.Int | v >= 0\n                     && v == Lib.size b}"
111:12-111:14::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 <= x2}"
111:15-111:21::lq_anf$##7205759403792803345 :: "{v : GHC.Types.Int | v >= 0\n                     && v == Lib.size f}"
111:24-111:27::_ :: "x1:{v : (Lib.SList a) | Lib.size v <= Lib.size f} -> {v : (Lib.Queue a) | Lib.sizeQ v == Lib.size f + Lib.size x1\n                                                                          && Lib.back v == x1\n                                                                          && Lib.front v == f}"
112:24-112:39::_ :: "x1:(Lib.SList a) -> {v : (Lib.Queue a) | Lib.back v == x1}"
112:27-112:32::_ :: "x1:{v : (Lib.SList a) | Lib.size v == Lib.size f + 1} -> x2:(Lib.SList a) -> {v : (Lib.SList a) | Lib.size v == (Lib.size f + Lib.size x1) + Lib.size x2}"
116:1-116:4::Lib.rot :: "x1:(Lib.SList a) -> x2:{v : (Lib.SList a) | Lib.size v == Lib.size x1 + 1} -> x3:(Lib.SList a) -> {v : (Lib.SList a) | Lib.size v == (Lib.size x1 + Lib.size x2) + Lib.size x3}"
116:5-116:6::f :: "(Lib.SList a)"
116:7-116:8::b :: "{v : (Lib.SList a) | Lib.size v == Lib.size f + 1}"
116:9-116:10::a :: "(Lib.SList a)"
117:5-117:11::lq_anf$##7205759403792803333 :: "{v : GHC.Types.Int | v >= 0\n                     && v == Lib.size f}"
117:12-117:14::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 == x2}"
117:19-117:23::lq_anf$##7205759403792803343 :: "a"
118:19-118:23::lq_anf$##7205759403792803337 :: "a"
118:31-118:41::Lib.rot :: "x1:(Lib.SList a) -> x2:{v : (Lib.SList a) | Lib.size v == Lib.size x1 + 1} -> x3:(Lib.SList a) -> {v : (Lib.SList a) | Lib.size v == (Lib.size x1 + Lib.size x2) + Lib.size x3}"
118:36-118:40::lq_anf$##7205759403792803338 :: "{v : (Lib.SList a) | Lib.size v == Lib.size f - 1}"
118:43-118:47::lq_anf$##7205759403792803339 :: "{v : (Lib.SList a) | Lib.size v == Lib.size b - 1}"
118:50-118:54::lq_anf$##7205759403792803340 :: "a"
122:1-122:5::Lib.take :: "x1:{n : GHC.Types.Int | n >= 0} -> x2:{q : (Lib.Queue a) | Lib.sizeQ q >= x1} -> ({v : (Lib.Queue a) | Lib.sizeQ v == x1}, {v : (Lib.Queue a) | Lib.sizeQ v == Lib.sizeQ x2 - x1})"
122:8-122:9::q :: "(Lib.Queue a)"
123:13-123:21::_ :: "x1:(Lib.Queue a) -> {v : (Lib.Queue a) | Lib.sizeQ v == Lib.sizeQ x1 + 1}"
125:6-125:7::x :: "a"
125:9-125:11::q' :: "{VV : (Lib.Queue a) | VV /= q\n                      && Lib.sizeQ VV == Lib.sizeQ q - 1}"
125:18-125:26::_ :: "(a, {v : (Lib.Queue a) | Lib.sizeQ v == Lib.sizeQ q - 1})"
126:6-126:9::out :: "{VV : (Lib.Queue a) | VV /= q}"
126:11-126:14::q'' :: "{VV : (Lib.Queue a) | VV /= q}"
126:18-126:28::Lib.take :: "x1:{n : GHC.Types.Int | n >= 0} -> x2:{q : (Lib.Queue a) | Lib.sizeQ q >= x1} -> ({v : (Lib.Queue a) | Lib.sizeQ v == x1}, {v : (Lib.Queue a) | Lib.sizeQ v == Lib.sizeQ x2 - x1})"
126:24-126:27::lq_anf$##7205759403792803381 :: "GHC.Types.Int"
126:25-126:26::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
130:1-130:7::Lib.okTake :: "({v : (Lib.Queue [GHC.Types.Char]) | Lib.sizeQ v == 2}, {v : (Lib.Queue [GHC.Types.Char]) | Lib.sizeQ v == 1})"
130:10-130:16::lq_anf$##7205759403792803384 :: "{v : GHC.Types.Int | v == (2 : int)}"
136:1-136:9::Lib.exampleQ :: "{v : (Lib.Queue [GHC.Types.Char]) | Lib.sizeQ v == 3}"
136:12-136:24::lq_anf$##7205759403792803363 :: "x1:(Lib.Queue [GHC.Types.Char]) -> {v : (Lib.Queue [GHC.Types.Char]) | Lib.sizeQ v == Lib.sizeQ x1 + 1}"
136:27-136:39::lq_anf$##7205759403792803366 :: "x1:(Lib.Queue [GHC.Types.Char]) -> {v : (Lib.Queue [GHC.Types.Char]) | Lib.sizeQ v == Lib.sizeQ x1 + 1}"
136:42-136:56::lq_anf$##7205759403792803369 :: "x1:(Lib.Queue [GHC.Types.Char]) -> {v : (Lib.Queue [GHC.Types.Char]) | Lib.sizeQ v == Lib.sizeQ x1 + 1}"